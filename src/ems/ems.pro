######################################################################
# Automatically generated by qmake (3.0) lun. janv. 19 23:37:31 2015
######################################################################

QT += testlib
QT += core network websockets sql dbus
# For QImage
QT += gui
QT_CONFIG -= no-pkg-config
CONFIG += c++11 link_pkgconfig

SUBDIRS +=

PKGCONFIG += libmpdclient libcdio flac flac++ sndfile taglib

TEMPLATE = app
TARGET = enna-media-server
INCLUDEPATH +=

# Input
HEADERS += Database.h \
           DirectoryWorker.h \
           DiscoveryServer.h \
           sha1.h \
           WebSocketServer.h \
           Application.h \
           Data.h \
           DefaultSettings.h \
           WebSocket.h \
           JsonApi.h \
           Player.h \
           SmartmontoolsNotifier.h \
           CdromManager.h \
           HttpServer.h \
           external/http-parser/http_parser.h \
           HttpClient.h \
           CdromManager.h \
           MetadataManager.h \
           MetadataPlugin.h \
           FlacPlugin.h \
           LocalFileScanner.h \
           DirectoriesWatcher.h \
           SndfilePlugin.h \
           DsdPlugin.h \
           CoverLocalPlugin.h \
           WavEncoder.h \
           FlacEncoder.h \
           TagLibPlugin.h \
           SoundCardManager.h

SOURCES += Database.cpp \
           DirectoryWorker.cpp \
           DiscoveryServer.cpp \
           main.cpp \
           sha1.cpp \
           WebSocketServer.cpp \
           Application.cpp \
           JsonApi.cpp \
           Player.cpp \
           SmartmontoolsNotifier.cpp \
           CdromManager.cpp \
           HttpServer.cpp \
           external/http-parser/http_parser.c \
           HttpClient.cpp \
           MetadataManager.cpp \
           FlacPlugin.cpp \
           LocalFileScanner.cpp \
           DirectoriesWatcher.cpp \
           SndfilePlugin.cpp \
           DsdPlugin.cpp \
           CoverLocalPlugin.cpp \
           WavEncoder.cpp \
           FlacEncoder.cpp \
           TagLibPlugin.cpp \
           SoundCardManager.cpp

DISTFILES +=

equals(EMS_PLUGIN_GRACENOTE, "yes") {
    message("Enable Gracenote plugin")
    DEFINES += EMS_PLUGIN_GRACENOTE
    PKGCONFIG += gnsdk
    HEADERS += GracenotePlugin.h
    SOURCES += GracenotePlugin.cpp
}

# Check if we want to enable (default) or disable CD RIP module
!equals(EMS_FEATURE_CDRIP, "no") {

    PKGCONFIG += libcdio_paranoia
    HEADERS += CdromRipper.h
    SOURCES += CdromRipper.cpp
    DEFINES += EMS_CDROM_RIPPER
    message("Enable CDROM Ripper module")

    # INCLUDE PATH FOR LIBCDIO-PARANOIA
    # Starting from version 0.90, the library path  has
    # changed. So we check the version here in order to
    # define PARANOIA_INCLUDE_PATH. This define could
    # have the following values :"cdio" or "cdio/paranoia"
    LIBCDIO_INCLUDE_PATH = "$$system(pkg-config libcdio_paranoia --variable=includedir)/cdio"
    LIBCDIO_INCLUDE_PATH = "$$LIBCDIO_INCLUDE_PATH$$system(pkg-config libcdio_paranoia --atleast-version=0.90 && echo /paranoia)"
    INCLUDEPATH += $$LIBCDIO_INCLUDE_PATH
    message("Use libcdio paranoia header in $$LIBCDIO_INCLUDE_PATH")
}

# For Mac OS taglib package, package config give path with /taglib...
macx {
    TAGLIB_INCLUDE_PATH = "$$system(pkg-config taglib --variable=includedir)"
    TAGLIB_INCLUDE_PATH ~= s/taglib$/
    INCLUDEPATH += $$TAGLIB_INCLUDE_PATH
    message("Use taglib headers in $$TAGLIB_INCLUDE_PATH")
}

# INSTALL RULES
#
isEmpty(PREFIX) {
    PREFIX = /usr/local
}
DEFINES += EMS_INSTALL_PREFIX=\\\"$$PREFIX\\\"

# install the binary
binary.path = $$PREFIX/bin
binary.files = $$TARGET
INSTALLS += binary
