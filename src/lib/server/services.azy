
//The namespace is added before each method and file
Azy_Namespace ems_rpc;

//struct send by the server with the response
//Azy will create a new and free methods
//Demo_Message_new() and Demo_Message_free()

struct Directory
{
   string name;
   string path;
};

struct Config
{
   string version;
   int port;
   string name;
   string video_extensions;
   array<Directory> video_directories;
};

struct Filter
{
   string metadata;
   string value;
};

//Our module, a module contains a list of methods
Azy_Module Config
{
   <%
#ifdef HAVE_CONFIG_H
# include <config.h>
#endif

#include <Eina.h>

#include "Ems.h"
#include "ems_private.h"
#include "ems_server.h"
   %>
   __version__(1.0);

   Config GetAll()
     <%
     (void)module;

   retval = ems_rpc_Config_new();
   retval->version = eina_stringshare_add(PACKAGE_VERSION);
   retval->port = ems_config->port;
   retval->name = eina_stringshare_add(ems_config->name);
   retval->video_extensions = eina_stringshare_add(ems_config->video_extensions);

   return retval;
   %>

     Config SetAll(Config cfg)
       <%
       (void) module;
   
     INF("Receive : %s", cfg->name);
     INF("Receive: %d", cfg->port);
     %>

       }


struct File
{
   string path;
   string friendly_name;
   int type;
};

Azy_Module Medias
{
   <%
#include <config.h>
#include <Ecore_File.h>
#include "ems_private.h"
   %>
   __version__(1.0);

   array<string> GetMedias(int type, array<Filter> filters)
   <%
     Eina_List *l;
     Ems_Collection_Filter *filter;

     (void)module;
     (void)type;
     return ems_database_collection_get(ems_config->db, NULL);
   %>

       string GetMediaInfo(string uuid, string metadata)
   <%
     (void)module;
     return ems_database_info_get(ems_config->db, uuid, metadata);
   %>

}

Azy_Module Browser
{
   <%
#include <config.h>
#include <Ecore_File.h>
#include "ems_private.h"
   %>

   __version__(1.0);

   array<File> GetSources()
   <%
     Eina_List *l;
     Ems_Directory *dir;
     ems_rpc_File *f;
     (void) module;

     EINA_LIST_FOREACH(ems_config->video_directories, l, dir)
       {
          f = ems_rpc_File_new();
          f->path = eina_stringshare_add(dir->path);
          retval = eina_list_append(retval, f);
       }
     return retval;
   %>

   array<File> GetDirectory(string path)
   <%
     Eina_List *files;
     ems_rpc_File *f;
     char *s;
     char filename[PATH_MAX + 1];

     (void) module;

     INF("Browse %s", path);
     files = ecore_file_ls(path);
     EINA_LIST_FREE(files, s)
       {
          f = ems_rpc_File_new();
          f->friendly_name = eina_stringshare_add(s);
          snprintf(filename, PATH_MAX, "%s/%s", path, s);
          f->path = eina_stringshare_add(filename);
          if (!ecore_file_is_dir(filename))
            f->type = 1;
          retval = eina_list_append(retval, f);
          free(s);
       }

     %>
}
